package types

import (
	"bytes"
	"testing"

	"github.com/Ankr-network/uscan/pkg/field"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/stretchr/testify/assert"
)

func TestFlag(t *testing.T) {
	t.Log(Erc20Flag + (Erc721Flag + Erc1155Flag))
}

func TestAccount(t *testing.T) {

	creator := common.HexToAddress("0x3c10ec535d1a8cba60536a963cc62a1df855e71c")
	txhash := common.HexToHash("0x537e032e5bc31b5e52f5e28c61c5aefd631b438bf5b9c71913c19d022a4ae528")
	a := &Account{
		BlockNumber: *field.NewInt(12231),
		Owner:       common.HexToAddress("0x473780deaf4a2ac070bbba936b0cdefe7f267dfc"),
		Balance:     *field.NewInt(1111),

		Erc20:            true,
		Erc721:           false,
		Erc1155:          true,
		Creator:          creator,
		TxHash:           txhash,
		Name:             "dasdada",
		Symbol:           "Da",
		TokenTotalSupply: *field.NewInt(219282312313),
		NftTotalSupply:   *field.NewInt(431421),
		Decimals:         *field.NewInt(18),
	}
	res, err := a.Marshal()

	assert.NoError(t, err)
	t.Log(hexutil.Bytes(res).String())

	out := Account{}
	err = out.Unmarshal(res)
	assert.NoError(t, err)

	assert.Equal(t, out.BlockNumber, a.BlockNumber)
	assert.Equal(t, out.Balance, a.Balance)
	assert.Equal(t, out.Erc20, a.Erc20)
	assert.Equal(t, out.Erc721, a.Erc721)
	assert.Equal(t, out.Erc1155, a.Erc1155)
	assert.Equal(t, out.Creator, a.Creator)
	assert.Equal(t, out.TxHash, a.TxHash)
	assert.Equal(t, out.Name, a.Name)
	assert.Equal(t, out.Symbol, a.Symbol)
	assert.Equal(t, out.TokenTotalSupply, a.TokenTotalSupply)
	assert.Equal(t, out.NftTotalSupply, a.NftTotalSupply)
	assert.Equal(t, out.Decimals, a.Decimals)
}

var (
	byteCode     = hexutil.MustDecode("0x60806040523480156200001157600080fd5b506000546100100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200019460201b620005721760201c565b15801562000063575060005460ff166001145b620000cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b604051068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610abe91815260200190565b60405180910390a3610812565b60655473ffffffffffffffffffffffffffffffffffffffff1633146103c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610497565b73ffffffffffffffffffffffffffffffffffffffff8216610bc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610497565b8060356000828254610bdb9190610e3a565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290610c15908490610e3a565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6065805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d0757600080fd5b919050565b600060208284031215610d1e57600080fd5b610d2782610ce3565b9392505050565b60008060408385031215610d4157600080fd5b610d4a83610ce3565b9150610d5860208401610ce3565b90509250929050565b600080600060608486031215610d7657600080fd5b610d7f84610ce3565b9250610d8d60208501610ce3565b9150604084013590509250925092565b60008060408385031215610db057600080fd5b610db983610ce3565b946020939093013593505050565b600060208083528351808285015260005b81811015610df457858101830151858201604001528201610dd8565b81811115610e06576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600181811c90821680610e8d57607f821691505b60208210811415610ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220570af5a94ad73a63a26a60cb11b0d3b5291ae93e30dd05ace55208abb8660e4264736f6c63430008070033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069")
	deployedCode = hexutil.MustDecode("0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610205578063a9059cbb14610218578063dd62ed3e1461022b578063f2fde38b1461027157600080fd5b806370a0823114610197578063715018a6146101cd5780638da5cb5b146101d557806395d89b41146101fd57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f57806340c10f191461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610193505050565b600060208083528351808285015260005b81811015610df457858101830151858201604001528201610dd8565b81811115610e06576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600181811c90821680610e8d57607f821691505b60208210811415610ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220570af5a94ad73a63a26a60cb11b0d3b5291ae93e30dd05ace55208abb8660e4264736f6c63430008070033")

	byteCodeNotArg     = hexutil.MustDecode("0x60806040523480156200001157600080fd5b5060004610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200019460201b620005721760201c565b15801562000063575060005460ff166001145b620000cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b604051068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610abe91815260200190565b60405180910390a3610812565b60655473ffffffffffffffffffffffffffffffffffffffff1633146103c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610497565b73ffffffffffffffffffffffffffffffffffffffff8216610bc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610497565b8060356000828254610bdb9190610e3a565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290610c15908490610e3a565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6065805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d0757600080fd5b919050565b600060208284031215610d1e57600080fd5b610d2782610ce3565b9392505050565b60008060408385031215610d4157600080fd5b610d4a83610ce3565b9150610d5860208401610ce3565b90509250929050565b600080600060608486031215610d7657600080fd5b610d7f84610ce3565b9250610d8d60208501610ce3565b9150604084013590509250925092565b60008060408385031215610db057600080fd5b610db983610ce3565b946020939093013593505050565b600060208083528351808285015260005b81811015610df457858101830151858201604001528201610dd8565b81811115610e06576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600181811c90821680610e8d57607f821691505b60208210811415610ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220570af5a94ad73a63a26a60cb11b0d3b5291ae93e30dd05ace55208abb8660e4264736f6c63430008070033")
	deployedCodeNotArg = hexutil.MustDecode("0x608060405234801561001057600080fd5b5060043616100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610205578063a9059cbb14610218578063dd62ed3e1461022b578063f2fde38b1461027157600080fd5b806370a0823114610197578063715018a6146101cd5780638da5cb5b146101d557806395d89b41146101fd57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f57806340c10f191461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610193505050565b600060208083528351808285015260005b81811015610df457858101830151858201604001528201610dd8565b81811115610e06576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600181811c90821680610e8d57607f821691505b60208210811415610ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056f0ea2646970667358221220570af5a94ad73a63a26a60cb11b0d3b5291ae93e30dd05ace55208abb8660e4264736f6c63430008070033")
)

func TestByteCode(t *testing.T) {
	end := deployedCode[len(deployedCode)-32:]
	res := bytes.Split(byteCode, end)
	assert.Equal(t, len(res), 2)
	t.Log(hexutil.Bytes(append(res[0], end...)).String())
	t.Log(hexutil.Bytes(res[1]).String())

	endNotArg := deployedCodeNotArg[len(deployedCode)-32:]
	resNotArg := bytes.Split(byteCodeNotArg, endNotArg)
	assert.Equal(t, len(res), 2)
	t.Log(hexutil.Bytes(append(resNotArg[0], end...)).String())
	t.Log(hexutil.Bytes(resNotArg[1]).String())
}

func TestAccountNil(t *testing.T) {

	testAcc := &Account{
		BlockNumber: *field.NewInt(2222),
		Owner:       common.HexToAddress("0x473780deaf4a2ac070bbba936b0cdefe7f267dfc"),
		Balance:     *field.NewInt(1111),
		Erc20:       true,
		Erc721:      false,
		Erc1155:     true,
		Name:        "dasdada",
		Symbol:      "Da",
	}

	bytesReq, err := testAcc.Marshal()
	assert.NoError(t, err)
	t.Log(hexutil.Encode(bytesReq))

	out := &Account{}
	err = out.Unmarshal(bytesReq)
	assert.NoError(t, err)
	t.Log(out)
	assert.Equal(t, out.BlockNumber, *field.NewInt(2222))
}
