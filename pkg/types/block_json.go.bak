package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

type BlockJson struct {
	Hash            common.Hash    `json:"hash"`
	Number          *hexutil.Big   `json:"number"`
	ParentHash      common.Hash    `json:"parentHash"`
	UncleHash       common.Hash    `json:"sha3Uncles"`
	Coinbase        common.Address `json:"miner"`
	Root            common.Hash    `json:"stateRoot"`
	TxHash          common.Hash    `json:"transactionsRoot"`
	ReceiptHash     common.Hash    `json:"receiptsRoot"`
	Bloom           Bloom          `json:"logsBloom"`
	Difficulty      *hexutil.Big   `json:"difficulty"`
	GasLimit        *hexutil.Big   `json:"gasLimit"`
	GasUsed         *hexutil.Big   `json:"gasUsed"`
	Time            *hexutil.Big   `json:"timestamp"`
	Extra           []byte         `json:"extraData"`
	MixDigest       common.Hash    `json:"mixHash"`
	Nonce           BlockNonce     `json:"nonce"`
	BaseFee         *hexutil.Big   `json:"baseFeePerGas"`
	Size            *hexutil.Big   `json:"size"`
	TotalDifficulty *hexutil.Big   `json:"totalDifficulty"`
	Transactions    []common.Hash  `json:"transactions"`
}

func (b *Block) MarshalJSON() ([]byte, error) {
	res := BlockJson{
		Hash:            b.Hash,
		Number:          (*hexutil.Big)(b.Number),
		ParentHash:      b.ParentHash,
		UncleHash:       b.UncleHash,
		Coinbase:        b.Coinbase,
		Root:            b.Root,
		TxHash:          b.TxHash,
		ReceiptHash:     b.ReceiptHash,
		Bloom:           b.Bloom,
		Difficulty:      (*hexutil.Big)(b.Difficulty),
		GasLimit:        (*hexutil.Big)(b.GasLimit),
		GasUsed:         (*hexutil.Big)(b.GasUsed),
		Time:            (*hexutil.Big)(b.Time),
		Extra:           b.Extra,
		MixDigest:       b.MixDigest,
		Nonce:           b.Nonce,
		BaseFee:         (*hexutil.Big)(b.BaseFee),
		Size:            (*hexutil.Big)(b.Size),
		TotalDifficulty: (*hexutil.Big)(b.TotalDifficulty),
		Transactions:    b.Transactions,
	}
	return json.Marshal(res)
}

func (b *Block) UnmarshalJSON(bin []byte) (err error) {
	var res = BlockJson{}

	err = json.Unmarshal(bin, &res)
	if err != nil {
		return err
	}
	b.Number = res.Number.ToInt()
	b.Hash = res.Hash
	b.ParentHash = res.ParentHash
	b.UncleHash = res.UncleHash
	b.Coinbase = res.Coinbase
	b.Root = res.Root
	b.TxHash = res.TxHash
	b.ReceiptHash = res.ReceiptHash
	b.Bloom = res.Bloom
	b.Difficulty = res.Difficulty.ToInt()
	b.GasLimit = res.GasLimit.ToInt()
	b.GasUsed = res.GasUsed.ToInt()
	b.Time = res.Time.ToInt()
	b.Extra = res.Extra
	b.MixDigest = res.MixDigest
	b.Nonce = res.Nonce
	b.BaseFee = res.BaseFee.ToInt()
	b.Size = res.Size.ToInt()
	b.TotalDifficulty = res.TotalDifficulty.ToInt()
	b.Transactions = res.Transactions
	b.TransactionTotal = big.NewInt(int64(len(res.Transactions)))
	return nil
}
