{"version":3,"file":"vue-codemirror.esm.js","sources":["../src/config.ts","../src/codemirror.ts","../src/component.ts","../src/index.ts"],"sourcesContent":["import { App, inject } from 'vue'\nimport { Props } from './component'\n\nconst CONFIG_SYMBOL = Symbol('vue-codemirror-global-config')\nexport const injectGlobalConfig = (app: App, config?: Props) => {\n  app.provide(CONFIG_SYMBOL, config)\n}\n\nexport const useGlobalConfig = () => {\n  return inject<Props>(CONFIG_SYMBOL, {} as Props)\n}\n","import { EditorState, EditorStateConfig, Compartment, Extension, StateEffect } from '@codemirror/state'\nimport { EditorView, ViewUpdate, keymap, placeholder } from '@codemirror/view'\nimport { indentWithTab } from '@codemirror/commands'\nimport { indentUnit } from '@codemirror/language'\nimport * as CSS from 'csstype'\n\n// state\nexport interface EditorStateCreatorOptions {\n  config: EditorStateConfig\n  onUpdate(viewUpdate: ViewUpdate): void\n  onChange(doc: string, viewUpdate: ViewUpdate): void\n  onFocus(viewUpdate: ViewUpdate): void\n  onBlur(viewUpdate: ViewUpdate): void\n}\nexport const createState = ({ config, ...events }: EditorStateCreatorOptions): EditorState => {\n  const extensions = Array.isArray(config.extensions) ? config.extensions : [config.extensions]\n  return EditorState.create({\n    doc: config.doc,\n    selection: config.selection,\n    extensions: [\n      ...extensions,\n      EditorView.updateListener.of((viewUpdate) => {\n        // https://discuss.codemirror.net/t/codemirror-6-proper-way-to-listen-for-changes/2395/11\n        events.onUpdate(viewUpdate)\n        if (viewUpdate.docChanged) {\n          events.onChange(viewUpdate.state.doc.toString(), viewUpdate)\n        }\n        if (viewUpdate.focusChanged) {\n          viewUpdate.view.hasFocus ? events.onFocus(viewUpdate) : events.onBlur(viewUpdate)\n        }\n      })\n    ]\n  })\n}\n\n// doc\nexport const getDoc = (view: EditorView) => view.state.doc.toString()\nexport const setDoc = (view: EditorView, newDoc: string) => {\n  return view.dispatch({\n    changes: {\n      from: 0,\n      to: view.state.doc.length,\n      insert: newDoc\n    }\n  })\n}\n\n// effects\nexport const destroy = (view: EditorView) => view.destroy()\nexport const focus = (view: EditorView) => view.focus() // TODO: focus on the last word\n\n// https://codemirror.net/examples/config/\n// https://github.com/uiwjs/react-codemirror/blob/22cc81971a/src/useCodeMirror.ts#L144\n// https://gist.github.com/s-cork/e7104bace090702f6acbc3004228f2cb\nconst rerunCompartment = () => {\n  const compartment = new Compartment()\n  const run = (view: EditorView, extension: Extension) => {\n    if (compartment.get(view.state)) {\n      // reconfigure\n      view.dispatch({ effects: compartment.reconfigure(extension) })\n    } else {\n      // inject\n      view.dispatch({ effects: StateEffect.appendConfig.of(compartment.of(extension)) })\n    }\n  }\n  return { compartment, run }\n}\n\n// https://codemirror.net/examples/reconfigure/\nexport const rerunExtension = () => rerunCompartment().run\nexport const toggleExtension = (extension: Extension) => {\n  const { compartment, run } = rerunCompartment()\n  return (view: EditorView, targetApply?: boolean) => {\n    const exExtension = compartment.get(view.state)\n    const apply = targetApply ?? exExtension !== extension\n    run(view, apply ? extension : [])\n  }\n}\n\n// extensions\nexport const extensions = {\n  placeholder: (string: string) => placeholder(string),\n  disable: () => [EditorView.editable.of(false), EditorState.readOnly.of(true)],\n  enable: () => [EditorView.editable.of(true), EditorState.readOnly.of(false)],\n  // https://codemirror.net/examples/tab/\n  indentWithTab: () => keymap.of([indentWithTab]),\n  tabSize: (tabSize: number) => [EditorState.tabSize.of(tabSize), indentUnit.of(' '.repeat(tabSize))],\n  // https://codemirror.net/examples/styling/\n  style: (style: CSS.Properties) => EditorView.theme({ '&': { ...style } })\n}\n","import {\n  defineComponent,\n  ref,\n  computed,\n  watch,\n  onMounted,\n  onBeforeUnmount,\n  h,\n  PropType,\n  ExtractPropTypes\n} from 'vue'\nimport * as CSS from 'csstype'\nimport { basicSetup } from 'codemirror'\nimport { EditorState, EditorStateConfig } from '@codemirror/state'\nimport { EditorView, ViewUpdate } from '@codemirror/view'\nimport { useGlobalConfig } from './config'\nimport * as cm from './codemirror'\n\nconst globalProps = {\n  autofocus: {\n    type: Boolean,\n    default: undefined\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  indentWithTab: {\n    type: Boolean,\n    default: undefined\n  },\n  tabSize: Number,\n  placeholder: String,\n  style: Object as PropType<CSS.Properties>,\n  // codemirror options\n  root: Object as PropType<ShadowRoot | Document>,\n  extensions: Array as PropType<EditorStateConfig['extensions']>,\n  selection: Object as PropType<EditorStateConfig['selection']>\n}\n\nexport type Props = ExtractPropTypes<typeof globalProps>\nexport const DEFAULT_CONFIG: Readonly<Partial<Props>> = Object.freeze({\n  autofocus: false,\n  disabled: false,\n  indentWithTab: true,\n  tabSize: 2,\n  placeholder: '',\n  extensions: [basicSetup]\n})\n\nexport default defineComponent({\n  name: 'VueCodemirror',\n  props: {\n    modelValue: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    ...globalProps\n  },\n  emits: {\n    // when content(doc) change only\n    'update:modelValue': (value: string, viewUpdate: ViewUpdate) => true,\n    change: (value: string, viewUpdate: ViewUpdate) => true,\n    // when codemirror state change\n    update: (viewUpdate: ViewUpdate) => true,\n    focus: (viewUpdate: ViewUpdate) => true,\n    blur: (viewUpdate: ViewUpdate) => true,\n    // when component mounted\n    ready: (payload: { view: EditorView; state: EditorState; container: HTMLDivElement }) => true\n  },\n  setup(props, context) {\n    const container = ref<HTMLDivElement>()\n    const component = {\n      view: null as any as EditorView,\n      state: null as any as EditorState\n    }\n    const defaultConfig = {\n      ...DEFAULT_CONFIG,\n      ...useGlobalConfig()\n    }\n\n    const config = computed(() => {\n      return Object.keys(props).reduce(\n        (result, key) => ({\n          ...result,\n          // @ts-ignore\n          [key]: props[key] ?? defaultConfig[key]\n        }),\n        {} as Required<Props>\n      )\n    })\n\n    onMounted(() => {\n      // init codemirror\n      component.state = cm.createState({\n        config: {\n          doc: props.modelValue,\n          selection: config.value.selection,\n          // The extensions are split into two parts, global and component prop.\n          // Only the global part is initialized here.\n          // The prop part is dynamically reconfigured after the component is mounted.\n          extensions: defaultConfig.extensions\n        },\n        onFocus: (viewUpdate) => context.emit('focus', viewUpdate),\n        onBlur: (viewUpdate) => context.emit('blur', viewUpdate),\n        onUpdate: (viewUpdate) => context.emit('update', viewUpdate),\n        onChange: (doc, viewUpdate) => {\n          if (doc !== props.modelValue) {\n            context.emit('update:modelValue', doc, viewUpdate)\n            context.emit('change', doc, viewUpdate)\n          }\n        }\n      })\n\n      component.view = new EditorView({\n        state: component.state,\n        parent: container.value!,\n        root: config.value.root\n      })\n\n      // watch prop.extensions\n      const reExtensions = cm.rerunExtension()\n      watch(\n        () => props.extensions,\n        (extensions) => reExtensions(component.view, extensions || []),\n        { immediate: true }\n      )\n\n      // watch prop.disabled\n      const toggleDisabled = cm.toggleExtension(cm.extensions.disable())\n      watch(\n        () => config.value.disabled,\n        (disabled) => toggleDisabled(component.view, disabled),\n        { immediate: true }\n      )\n\n      // watch prop.indentWithTab\n      const toggleIWT = cm.toggleExtension(cm.extensions.indentWithTab())\n      watch(\n        () => config.value.indentWithTab,\n        (iwt) => toggleIWT(component.view, iwt),\n        { immediate: true }\n      )\n\n      // watch prop.tabSize\n      const reTabSize = cm.rerunExtension()\n      watch(\n        () => config.value.tabSize,\n        (tabSize) => reTabSize(component.view, cm.extensions.tabSize(tabSize)),\n        { immediate: true }\n      )\n\n      // watch prop.placeholder\n      const rePlaceholder = cm.rerunExtension()\n      watch(\n        () => config.value.placeholder,\n        (placeholder) => rePlaceholder(component.view, cm.extensions.placeholder(placeholder)),\n        { immediate: true }\n      )\n\n      // watch prop.style\n      const reStyle = cm.rerunExtension()\n      watch(\n        () => config.value.style,\n        (style) => reStyle(component.view, cm.extensions.style(style)),\n        { immediate: true }\n      )\n\n      // watch prop.modal value\n      watch(\n        () => props.modelValue,\n        (newValue) => {\n          if (newValue !== cm.getDoc(component.view)) {\n            cm.setDoc(component.view, newValue)\n          }\n        }\n      )\n\n      // immediate autofocus\n      if (config.value.autofocus) {\n        cm.focus(component.view)\n      }\n\n      // ready\n      context.emit('ready', {\n        ...component,\n        container: container.value!\n      })\n    })\n\n    onBeforeUnmount(() => {\n      // destroy codemirror\n      cm.destroy(component.view)\n    })\n\n    return () => {\n      return h('div', {\n        class: 'v-codemirror',\n        style: { display: 'contents' },\n        ref: container\n      })\n    }\n  }\n})\n","import type { Plugin } from 'vue'\nimport Component, { Props } from './component'\nimport { injectGlobalConfig } from './config'\n\nexport type { Props } from './component'\nexport { DEFAULT_CONFIG } from './component'\n\nexport const Codemirror = Component\nexport const install: Plugin = (app, defaultConfig?: Props) => {\n  app.component(Component.name, Component)\n  injectGlobalConfig(app, defaultConfig)\n}\n\nexport default {\n  Codemirror: Component,\n  install\n}\n"],"names":["const","CONFIG_SYMBOL","Symbol","createState","_a","config","events","__rest","extensions","Array","isArray","EditorState","create","doc","selection","concat","EditorView","updateListener","of","viewUpdate","onUpdate","docChanged","onChange","state","toString","focusChanged","view","hasFocus","onFocus","onBlur","rerunCompartment","compartment","Compartment","run","extension","get","dispatch","effects","reconfigure","StateEffect","appendConfig","rerunExtension","toggleExtension","ref","targetApply","exExtension","string","placeholder","editable","readOnly","keymap","indentWithTab","tabSize","indentUnit","repeat","style","theme","Object","assign","globalProps","autofocus","type","Boolean","default","undefined","disabled","Number","String","root","DEFAULT_CONFIG","freeze","basicSetup","Component","defineComponent","name","props","modelValue","required","emits","value","change","update","focus","blur","ready","payload","setup","context","container","component","defaultConfig","inject","computed","keys","reduce","result","key","obj","onMounted","cm.createState","emit","parent","reExtensions","cm.rerunExtension","watch","immediate","toggleDisabled","cm.toggleExtension","cm.extensions","toggleIWT","iwt","reTabSize","rePlaceholder","reStyle","newValue","newDoc","changes","from","to","length","insert","cm.setDoc","onBeforeUnmount","destroy","h","class","display","Codemirror","install","app","provide","injectGlobalConfig","index"],"mappings":"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"}